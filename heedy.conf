plugin "cgm" {
    version = "1.0.1"
    description = "Heedy integration with continuous glucose monitors."
    license = "MIT"

    run "backend" {
        type = "python"
        path = "backend/main.py"
        api = "unix:cgm.sock"
    }

    heedy_version = ">=0.4.1-git.1569"

    // Route all traffic from /api/cgm to the plugin's backend server
    routes = {
        "/api/cgm": "run:backend",
        "/api/cgm/*": "run:backend"
    }

    app "cgm" {
        name = "Glucose Monitor"
        description = "Integrate Heedy with blood glucose gathering systems."
        icon = "fas fa-tint"

        on "app_create" {
            post = "run:backend/create"
        }
        on "app_settings_update" {
            post = "run:backend/settings_update"
        }

        settings_schema = {
            "type": "object",
            "properties": {
                "sync_services": {
                    "title": "List of Services to Sync with Heedy",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "oneOf": [
                            {  
                                "title": "Nightscout",
                                "description": "Sync glucose data from the open-source [Nightscout](https://nightscout.github.io/) server. Heedy will need an [access token](https://nightscout.github.io/nightscout/security/#create-a-token) with `readable` role to sync with the database.",
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "title": "URL of the Server",
                                        "type": "string",
                                        "format": "uri",
                                        "description": "URL of the Nightscout server, in the form `https://mynightscout.com`, to which `/api/v1/` will be appended when performing API requests."
                                    },
                                    "api_key": {
                                        "title": "API Token",
                                        "type": "string",
                                        "description": "An API Access Token with `readable` role to use when authenticating to the Nightscout server."
                                    },
                                    "service_type": {
                                        "type": "string",
                                        "const": "nightscout"
                                    }
                                },
                                "required": ["url", "api_key"]
                            }
                        ]
                    },
                    "default": []
                }
            }
        }

        object "blood_test" {
            name = "Manual Glucose Readings"
            description = "Manual blood glucose readings"
            tags = "cgm glucose mbg"
            type = "timeseries"
            icon = "fas fa-tint"

            meta = {
                "schema": {"type":"number"}
            }

            owner_scope = "read write"
        }

        object "cgm" {
            name = "CGM Glucose Readings"
            description = "Automated readings of blood glucose from a sensor"
            tags = "cgm glucose sgv"
            type = "timeseries"
            icon="bloodtype"

            owner_scope = "read"

            meta = {
                "schema": {"type":"number"}
            }
        }

        object "events" {
            name = "CGM Events"
            icon = "fas fa-calendar-check"
            description = "Events gathered by the CGM app"
            tags = "cgm events"
            type = "timeseries"

            owner_scope = "read"

            meta = {
                "schema": {"type":"string", "enum":["sensor_start"]}
            }
        }
    }

    config_schema = {
        "num_processes": {
            "type": "integer",
            "description": "Size of the process pool used when uploading data",
            "minimum": 1,
            "default": 1
        },
        "sync_every": {
            "type": "number",
            "description": "Number of seconds between syncs",
            "minimum": 1,
            "default": 60*60
        },
    }
    
    
}